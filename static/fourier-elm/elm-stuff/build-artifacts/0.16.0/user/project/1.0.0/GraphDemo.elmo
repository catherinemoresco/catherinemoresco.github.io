Elm.GraphDemo = Elm.GraphDemo || {};
Elm.GraphDemo.make = function (_elm) {
   "use strict";
   _elm.GraphDemo = _elm.GraphDemo || {};
   if (_elm.GraphDemo.values) return _elm.GraphDemo.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphing = Elm.Graphing.make(_elm),
   $Html = Elm.Html.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm);
   var _op = {};
   var graphStyle = function (x) {
      return _U.update($Graphing.defaultGraph,
      {width: 800
      ,height: 100
      ,yInterval: {ctor: "_Tuple2",_0: -2,_1: 10}
      ,xInterval: {ctor: "_Tuple2",_0: 1.0e-3 * x,_1: 10 + 1.0e-3 * x}
      ,margin: 1
      ,axisColor: "#FFF"});
   };
   var func3 = $Graphing.wrapFunc(function (x) {
      return 1 * $Basics.cos(10 * (12 / 7) * x) + $Basics.sin(x / 10) - 2 * $Basics.sin(10 * (3 / 5) * x) + 2.5;
   });
   var main = A2($Signal.map,
   function (x) {
      return A2($Graphing.graph,_U.list([{ctor: "_Tuple2",_0: func3,_1: _U.update($Graphing.defaultPlot,{strokeColor: "#ee2560"})}]),graphStyle(x));
   },
   A3($Signal.foldp,F2(function (x,y) {    return x + y;}),0,$Time.fps(60)));
   var func2 = $Graphing.wrapFunc(function (x) {    return 2 * $Basics.cos(x);});
   var func = $Graphing.wrapFunc(function (x) {    return $Basics.sin(x);});
   var data = $Graphing.wrapData(_U.list([{ctor: "_Tuple2",_0: 1,_1: 1}
                                         ,{ctor: "_Tuple2",_0: 2,_1: 2}
                                         ,{ctor: "_Tuple2",_0: 3,_1: 3}
                                         ,{ctor: "_Tuple2",_0: 4,_1: 4}
                                         ,{ctor: "_Tuple2",_0: 6,_1: 8}
                                         ,{ctor: "_Tuple2",_0: 9,_1: 10}]));
   return _elm.GraphDemo.values = {_op: _op,data: data,func: func,func2: func2,func3: func3,graphStyle: graphStyle,main: main};
};